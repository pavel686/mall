package com.cblue.search.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.solr.core.SolrTemplate;
import org.springframework.data.solr.core.query.Criteria;
import org.springframework.data.solr.core.query.FilterQuery;
import org.springframework.data.solr.core.query.GroupOptions;
import org.springframework.data.solr.core.query.HighlightOptions;
import org.springframework.data.solr.core.query.HighlightQuery;
import org.springframework.data.solr.core.query.Query;
import org.springframework.data.solr.core.query.SimpleFilterQuery;
import org.springframework.data.solr.core.query.SimpleHighlightQuery;
import org.springframework.data.solr.core.query.SimpleQuery;
import org.springframework.data.solr.core.query.result.GroupEntry;
import org.springframework.data.solr.core.query.result.GroupPage;
import org.springframework.data.solr.core.query.result.GroupResult;
import org.springframework.data.solr.core.query.result.HighlightEntry;
import org.springframework.data.solr.core.query.result.HighlightPage;
import org.springframework.data.solr.core.query.result.ScoredPage;

import com.alibaba.dubbo.config.annotation.Service;
import com.cblue.pojo.TbItem;
import com.cblue.pojogroup.Goods;
import com.cblue.search.SearchItemService;

@Service(timeout=3000)
public class SearchItemServiceImpl implements SearchItemService {

	@Autowired
	private SolrTemplate solrTemplate;
	
	@Autowired
	private RedisTemplate redisTemplate;
	
	// keywords --> 内容
	@Override
	public Map<String, Object> search(Map searchMap) {
		Map<String,Object> map=new HashMap<>();
		//简单搜索
		Query query=new SimpleQuery();
		System.out.println("keywords="+searchMap.get("keywords"));
		//添加查询条件
		Criteria criteria=new Criteria("item_keywords").is(searchMap.get("keywords"));
		query.addCriteria(criteria);
		
		System.out.println("searchMap="+searchMap.get("categoryId"));
		//添加分类查询条件
		if(!"".equals(searchMap.get("categoryId"))){
			query = cateoryQuery(searchMap, query);
		}
		
	    ScoredPage<TbItem> page = solrTemplate.queryForPage(query, TbItem.class);
		map.put("rows", page.getContent());
		
		
		//实现高亮搜索
		//map.putAll(searchHightLight(searchMap));
		
		//实现分组查询
		List<String> categoryList  = searchGroup(searchMap);
		map.put("categoryList", categoryList);
		
		System.out.println("categoryList.get(0)="+categoryList.get(0));
		//获得品牌和规格
		if(categoryList.size()>0){
			map.putAll(getBrandAndSpecFromRedis(categoryList.get(0)));
		}
		
		return map;
	}
	
	/**
	 * 根据分类查询
	 */
	private Query cateoryQuery(Map searchMap,Query query){	
		Criteria filCriteria = new Criteria("item_category").is(searchMap.get("categoryId"));
		FilterQuery filterQuery  = new SimpleFilterQuery(filCriteria);
		return query.addFilterQuery(filterQuery);
	}
	
	/**
	 * 根据品牌查询
	 */
	private Query brandQuery(Map searchMap,Query query){
		Criteria filterCriteria=new Criteria("item_brand").is(searchMap.get("brand"));
		FilterQuery filterQuery=new SimpleFilterQuery(filterCriteria);
		return query.addFilterQuery(filterQuery);
	}
	
	
	/*
	 * 高亮显示
	 */
	private Map searchHightLight(Map searchMap){
		Map<String,Object> map=new HashMap<>();
		
		//创建一个高亮的搜索对象
		HighlightQuery highlightQuery = new SimpleHighlightQuery();
		
		//创建高亮显示的选项（如何实现高亮）
		HighlightOptions highlightOptions = new HighlightOptions().addField("item_title");;
		highlightOptions.setSimplePrefix("<font color='red'>");
		highlightOptions.setSimplePostfix("</font>");
		
		highlightQuery.setHighlightOptions(highlightOptions);
		
		//按照关键字进行查询
		Criteria criteria=new Criteria("item_keywords").is(searchMap.get("keywords"));
		highlightQuery.addCriteria(criteria);
		
		HighlightPage<TbItem> page =  solrTemplate.queryForHighlightPage(highlightQuery,TbItem.class);
		
		//还需要执行高亮选项
		for(HighlightEntry<TbItem> h :page.getHighlighted()){
			  TbItem tbItem =  h.getEntity();
			  if(h.getHighlights().size()>0&&h.getHighlights().get(0).getSnipplets().size()>0){
				  //给标题设置高亮显示<font color='red'>关键字</font>
				  System.out.println("设置高亮显示="+h.getHighlights().get(0).getSnipplets().get(0));
				  tbItem.setTitle(h.getHighlights().get(0).getSnipplets().get(0));
			  }
			
		}
		map.put("rows", page.getContent());
		return map;
	}
	
	
	//分组查询
	private List searchGroup(Map searchMap){
		List<String> list = new ArrayList<String>();
		
		Query query = new SimpleQuery();
		
		
		//根据关键字进行查询
		Criteria criteria=new Criteria("item_keywords").is(searchMap.get("keywords"));
		query.addCriteria(criteria);
		
		//设置分组选项
		GroupOptions groupOptions = new GroupOptions().addGroupByField("item_category");
		query.setGroupOptions(groupOptions);
		
		//执行查询
		GroupPage<TbItem> page = solrTemplate.queryForGroupPage(query, TbItem.class);
		
		//得到查询的分类内容
		GroupResult<TbItem> groupResult = page.getGroupResult("item_category");
		//得到分类对象
		Page<GroupEntry<TbItem>> groupEntryPage = groupResult.getGroupEntries();
		//多个分类
		List<GroupEntry<TbItem>> content = groupEntryPage.getContent();
		
		for(GroupEntry<TbItem> g:content){
			System.out.println("g.getGroupValue()="+g.getGroupValue());
			list.add(g.getGroupValue());
		}
		
		return list;
	}
	
	//从redis中查询品牌和规格
	private Map getBrandAndSpecFromRedis(String categoryId){
		Map map = new HashMap();
		//根据id，查询typeid
		Long typeId = (Long) redisTemplate.boundHashOps("itemCat").get(categoryId);
		System.out.println("typeId2"+redisTemplate.boundHashOps("itemCat").get(categoryId));
		System.out.println("typeId="+typeId);
		
		if(typeId!=null){
			
			List brandList = (List)redisTemplate.boundHashOps("brand").get(typeId);
			map.put("brand", brandList);
			
			List specList = (List)redisTemplate.boundHashOps("spec").get(typeId);
			map.put("spec", specList);
			
			System.out.println(brandList.size());
			System.out.println(brandList.get(0).toString());
		}
		return map;
	}

}
